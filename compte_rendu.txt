Compte rendu de projet – TP Noté Cinéma
Date: 2025-09-25 11:31
(Pour ce projet je me suis aidé de Junie pour generer du code)

1) Objet du projet
Application REST (Spring Boot) pour la gestion d’un cinéma: films, salles, séances, réservations et utilisateurs (avec carte de fidélité). L’objectif est de fournir un back-end prêt à l’emploi avec endpoints documentés (Swagger), persistance H2 par défaut, validations, gestion d’erreurs et un socle de tests.

2) Périmètre fonctionnel
- Consulter la liste des films.
- Ajouter des films (rôle: PRODUCTEUR ou DISTRIBUTEUR).
- Ajouter des salles (rôle: ADMIN).
- Créer des séances (film + salle + date + heure).
- Enregistrer des utilisateurs et acheter une carte de fidélité (valable 1 an).
- Réserver des places pour une séance, avec contrôle de capacité et réduction fidélité.

3) Stack et choix techniques
- Java 17, Spring Boot 3 (web, validation, data-jpa).
- Base H2 en mémoire (jdbc:h2:mem:productsdb). MySQL possible via configuration.
- JPA/Hibernate pour la persistance.
- Lombok pour réduire le boilerplate (getters/setters/builders).
- Springdoc OpenAPI 2.6.0 pour Swagger UI (/swagger-ui) et /v3/api-docs.
- Tests JUnit 5, AssertJ, Mockito/MockMvc selon les besoins.

4) Modèle de données (entités principales)
- Film: id, titre (not null), genre, duree, dateSortie (String), prix (BigDecimal), realisateur.
- Salle: id, nom (unique, not null), capacite (not null).
- Seance: id, date (String ISO yyyy-MM-dd), heure (String HH:mm), salle (ManyToOne), film (ManyToOne).
- Utilisateur: id, nom (not null), email, motDePasse (not null), carteFideliteActive (boolean), carteExpiration (String ISO, optionnel).
- Reservation: id, utilisateur (ManyToOne), seance (ManyToOne), nombrePlaces (not null).

Remarques:
- Les champs date/heure sont stockés en String pour faciliter la saisie multi-formats; la validation est assurée côté DTO/service.

5) DTOs & Mappers
- FilmDto (+ FilmDtoMapper)
- SalleCreateDto
- SeanceCreateDto
- UserRegistrationDto
- ReservationRequestDto, ReservationResponseDto

6) Endpoints REST (principaux)
- Films
  - GET /api/films — lister les films
  - POST /api/films (JSON ou form-data/x-www-form-urlencoded) — rôle: PRODUCTEUR ou DISTRIBUTEUR
- Salles
  - POST /api/salles (JSON ou form-data/x-www-form-urlencoded) — rôle: ADMIN
- Séances
  - POST /api/seances (JSON ou form-data/x-www-form-urlencoded)
  - Contraintes: date yyyy-MM-dd (aujourd’hui/futur), heure HH:mm
- Réservations
  - POST /api/reservations (JSON ou form-data/x-www-form-urlencoded)
- Utilisateurs
  - POST /api/utilisateurs (JSON ou form-data/x-www-form-urlencoded)
  - POST /api/utilisateurs/{id}/carte (achat carte fidélité valable 1 an)

7) Règles métier & validations
- Capacité: la somme des réservations d’une séance ne peut pas dépasser la capacité de la salle (CapacityExceededException).
- Réductions: si carte de fidélité active et non expirée à la date du jour, remise de 10% sur le total.
- Séances: la date doit être au format ISO yyyy-MM-dd et être aujourd’hui ou future; l’heure au format HH:mm.
- Validations DTO (exemples):
  - FilmDto: titre obligatoire; prix >= 0; duree > 0 si fournie.
  - UserRegistrationDto: nom/email/motDePasse obligatoires; email au format valide.
  - ReservationRequestDto: ids non nuls; nombrePlaces >= 1.
- Gestion des erreurs: GlobalExceptionHandler couvre NotFound, BadRequest/CapacityExceeded, Forbidden (rôles), erreurs de validation (400), et fallback 500.

8) Rôles et autorisation (léger)
- Contrôle d’accès minimal via l’en-tête HTTP X-ROLE:
  - ADMIN requis pour créer des salles.
  - PRODUCTEUR ou DISTRIBUTEUR requis pour créer des films.
- Ce mécanisme n’est pas une authentification complète; une intégration Spring Security/JWT est envisageable.

9) Documentation & outils
- Swagger UI: http://localhost:8080/swagger-ui/index.html
- OpenAPI JSON: http://localhost:8080/v3/api-docs
- Console H2: http://localhost:8080/h2-console (JDBC: jdbc:h2:mem:productsdb)
- README.md: inclut des exemples complets d’endpoints et des commandes curl (y compris les rôles X-ROLE).

10) Lancement & exécution
- mvn spring-boot:run
- Ou exécuter la classe: org.example.tp_noteqd_cinema.TpNoteQdCinemaApplication
- JAR: mvn clean package puis java -jar target/TP_noteQD_cinema-0.0.1-SNAPSHOT.jar

11) Tests
- Lancer: mvn test
- Échantillon de tests présents:
  - Repository: FilmRepositoryTest (save & findAll)
  - Service: UserServiceTest (inscription, carte de fidélité, erreurs)
  - Contrôleur: FilmsControllerTest (liste, création avec rôle, 403 sans rôle)

12) Décisions & correctifs majeurs réalisés
- Harmonisation H2: configuration jdbc:h2:mem:productsdb pour accès via console H2.
- Validation d’entrée: annotations Bean Validation sur les DTOs + @Valid/@Validated dans les contrôleurs.
- Support multipart/form-data et x-www-form-urlencoded sur tous les POST clés (films, salles, séances, réservations, utilisateurs).
- Dates/Heures en String: passage de LocalDate/LocalTime à String + validations par regex et logique métier (dates futures) dans SeanceService.
- Nettoyage des champs String côté formulaires: binder global pour supprimer guillemets et espaces superflus (améliore la validation @Email).
- Swagger/OpenAPI: operationId uniques pour éviter les erreurs 500 à /v3/api-docs.
- Alignement des dépendances Spring/springdoc pour supprimer le NoSuchMethodError lié à ControllerAdviceBean.
- Mise en place d’un contrôle de rôles léger via l’en-tête X-ROLE (ADMIN, PRODUCTEUR, DISTRIBUTEUR).

13) Limites actuelles
- Autorisation minimale par en-tête; pas d’authentification complète (pas de Spring Security/JWT encore).
- Pas de gestion de concurrence fine (risque de sur-réservation sans verrouillage optimiste/pessimiste).
- Pas de pagination/tri/filtrage sur la liste des films.
- Pas de gestion d’annulation de réservation.
- Données en mémoire par défaut (H2) — non persistantes entre démarrages.

14) Pistes d’amélioration
- Intégrer Spring Security (JWT) avec rôles (ADMIN, PRODUCTEUR, DISTRIBUTEUR, UTILISATEUR).
- Verrouillage optimiste (versioning) ou stratégies atomiques pour la réservation.
- Exposer des endpoints GET supplémentaires (salles, séances, réservations) avec pagination/tri/filtrage.
- Renforcer les contraintes DB (not null/unique) en cohérence avec les validations.
- Étendre la couverture de tests (MockMvc pour autres contrôleurs, tests d’intégration H2/MySQL).
- Tarification avancée (heures creuses, promotions, catégories).

15) Références
- Swagger UI: /swagger-ui/index.html
- H2 Console: /h2-console (User: sa, Password vide)
- README.md du projet (détails d’utilisation et commandes curl)

